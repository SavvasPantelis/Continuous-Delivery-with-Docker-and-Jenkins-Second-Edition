pipeline {
    agent any

    stages {
        stage('Declarative: Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Ensure gradlew is executable') {
            steps {
                sh 'chmod +x Chapter08/sample1/gradlew'
            }
        }

        stage('Check gradlew existence') {
            steps {
                script {
                    sh 'ls -la Chapter08/sample1/gradlew'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    dir('Chapter08/sample1') {
                        sh './gradlew clean test jacocoTestReport --no-daemon'
                    }
                }
            }
        }

        stage('Code Coverage') {
            when {
                branch 'master'
            }
            steps {
                script {
                    dir('Chapter08/sample1') {
                        sh './gradlew jacocoTestReport --no-daemon'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t localhost:5001/calculator:1.0 .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh 'docker push localhost:5001/calculator:1.0'
                }
            }
        }

        stage('Test Docker Container') {
            steps {
                script {
                    echo "Testing the new 'div' command in the container"
                    def result = sh(script: "curl -s localhost:5001/calculator:1.0/div?a=6\\&b=2", returnStdout: true).trim()
                    if (result.toInteger() == 3) {
                        echo 'Pass: Division result is correct'
                    } else {
                        error "Test failed: Division result is incorrect"
                    }

                    def zeroDivisionResult = sh(script: "curl -s localhost:5001/calculator:1.0/div?a=6\\&b=0", returnStdout: true).trim()
                    if (zeroDivisionResult == "Error: Division by Zero") {
                        echo 'Pass: Division by zero error handled correctly'
                    } else {
                        error "Test failed: Division by zero did not return the expected error message"
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    sh 'docker rm -f hazelcast || true'
                    sh 'docker rm -f calculator || true'
                }
            }
        }

        stage('Post Actions') {
            steps {
                cleanWs()
                echo "Build and tests completed successfully."
            }
        }
    }
}

