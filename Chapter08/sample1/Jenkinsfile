pipeline {
    agent any
    environment {
        REGISTRY = 'localhost:5001' //test  
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    dir('Chapter08/sample1') { 
                        if (env.BRANCH_NAME == 'master') {
                    
                            sh './gradlew clean test jacocoTestReport --no-daemon'
                        } else if (env.BRANCH_NAME == 'feature') {
                    
                            sh './gradlew clean test --no-daemon'
                        } else if (env.BRANCH_NAME == 'playground') {
                   
                            sh './gradlew clean test --no-daemon'
                        }
                    }
                }
            }
        }

        stage('Code Coverage') {
            when {
                branch 'master'
            }
            steps {
                dir('Chapter08/sample1') {
                  
                    sh './gradlew jacocoTestReport --no-daemon'
                }
            }
        }

        stage('Build Docker Image') {
            when {
                expression {
                    return env.BRANCH_NAME != 'playground' && currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    def imageName
                    def version = '1.0'

                    if (env.BRANCH_NAME == 'feature') {
                        imageName = 'calculator-feature'
                        version = '0.1'
                    } else if (env.BRANCH_NAME == 'master') {
                        imageName = 'calculator'
                    }

                    dir('Chapter08/sample1') {  
  
                        sh """
                        docker build -t ${REGISTRY}/${imageName}:${version} .
                        """

 
                        sh """
                        docker push ${REGISTRY}/${imageName}:${version}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Build and tests completed successfully."
        }

        failure {
            echo "Build or tests failed. No container will be created."
        }
    }
}

