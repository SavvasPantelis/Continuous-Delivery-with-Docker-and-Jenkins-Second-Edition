pipeline {
    agent any

    environment {
        CALCULATOR_URL = "http://localhost:5001"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Ensure gradlew is executable') {
            steps {
                sh 'chmod +x gradlew'
            }
        }

        stage('Run Tests') {
            steps {
                dir('Chapter09/sample1') {
                    sh './gradlew clean build --no-daemon'
                    sh './gradlew test jacocoTestReport --no-daemon'
                }
            }
        }

        stage('Code Coverage') {
            steps {
                dir('Chapter09/sample1') {
                    sh './gradlew jacocoTestReport --no-daemon'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('Chapter09/sample1') {
                    sh 'docker build -t localhost:5001/calculator:1.0 .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push localhost:5001/calculator:1.0'
            }
        }

        stage('Test Docker Container') {
            steps {
                script {
                    def container_id = sh(script: "docker run -d --name calculator localhost:5001/calculator:1.0", returnStdout: true).trim()
                    sleep(5)  // Wait for container to start

                    // Test divide 6 by 2
                    def result = sh(script: "curl -s ${CALCULATOR_URL}:8080/div?a=6&b=2", returnStdout: true).trim()
                    if (result == "3") {
                        echo "Divide test passed"
                    } else {
                        echo "Divide test failed"
                        currentBuild.result = 'FAILURE'
                    }

                    // Test divide by 0
                    def errorResult = sh(script: "curl -s ${CALCULATOR_URL}:8080/div?a=6&b=0", returnStdout: true).trim()
                    if (errorResult.contains("error")) {
                        echo "Divide by 0 error handled"
                    } else {
                        echo "Divide by 0 test failed"
                        currentBuild.result = 'FAILURE'
                    }

                    // Clean up
                    sh "docker rm -f ${container_id}"
                }
            }
        }

        stage('Publish Test Report') {
            steps {
                dir('Chapter09/sample1') {
                    junit '**/build/test-classes/acceptanceTest/*.xml'
                }
            }
        }

        stage('Cleanup') {
            steps {
                cleanWs()
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed'
        }
    }
}

