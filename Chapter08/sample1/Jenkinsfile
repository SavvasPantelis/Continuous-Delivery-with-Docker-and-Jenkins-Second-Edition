pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "localhost:5001"
        IMAGE_NAME = "calculator"
        VERSION = "1.0"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh './gradlew clean test --no-daemon'
                }
            }
        }

        stage('Build Jar') {
            steps {
                script {
                    sh './gradlew build --no-daemon'
                }
            }
        }

        stage('Code Coverage') {
            when {
                branch 'master'
            }
            steps {
                script {
                    sh './gradlew jacocoTestReport --no-daemon'
                }
            }
        }

        stage('Build Docker Image') {
            when {
                not {
                    branch 'playground'
                }
            }
            steps {
                script {
                    def imageTag = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${VERSION}"

                    if (env.BRANCH_NAME == 'feature') {
                        imageTag = "${DOCKER_REGISTRY}/${IMAGE_NAME}-feature:${VERSION}"
                    }

                    sh "docker build -t ${imageTag} ."
                }
            }
        }

        stage('Push Docker Image') {
            when {
                not {
                    branch 'playground'
                }
            }
            steps {
                script {
                    def imageTag = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${VERSION}"

                    if (env.BRANCH_NAME == 'feature') {
                        imageTag = "${DOCKER_REGISTRY}/${IMAGE_NAME}-feature:${VERSION}"
                    }

                    sh "docker push ${imageTag}"
                }
            }
        }

    }

    post {
        always {
            echo 'Cleaning up after the build.'
            cleanWs()
        }
        success {
            echo 'Build and tests completed successfully.'
        }
        failure {
            echo 'Build or tests failed. No container will be created.'
        }
    }
}

