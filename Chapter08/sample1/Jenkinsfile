pipeline {
    agent {
        docker {
            image 'week11' // Build this image from Dockerfile below
            args '-u root:root -v /var/run/docker.sock:/var/run/docker.sock -v /home/YOUR_USER/sa.json:/home/jenkins/sa.json -e GOOGLE_APPLICATION_CREDENTIALS=/home/jenkins/sa.json'
        }
    }

    environment {
        IMAGE_NAME = "spantelis20/calculator"
        IMAGE_TAG = "1.0"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Make gradlew Executable') {
            steps {
                sh 'chmod +x Chapter08/sample1/gradlew'
            }
        }

        stage('Run Unit Tests') {
            steps {
                dir('Chapter08/sample1') {
                    sh './gradlew clean build test jacocoTestReport --no-daemon'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('Chapter08/sample1') {
                    sh 'docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .'
                }
            }
        }

        stage('Push Image to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                        sh 'docker push ${IMAGE_NAME}:${IMAGE_TAG}'
                    }
                }
            }
        }

        stage('Deploy to Staging (Docker Desktop)') {
            steps {
                sh 'kubectl config use-context staging'
                sh 'kubectl apply -f Chapter08/sample1/hazelcast.yaml'
                sh 'kubectl apply -f Chapter08/sample1/calculator.yaml'
            }
        }

        stage('Integration Tests (Staging)') {
            steps {
                script {
                    sh '''
                        sleep 5
                        kubectl get pods
                        curl -s localhost:8080/div?a=6\&b=2 | grep -q '3' && echo 'pass' || echo 'fail'
                    '''
                }
            }
        }

        stage('Deploy to Release (GKE)') {
            steps {
                sh 'kubectl config use-context release'
                sh 'kubectl apply -f Chapter08/sample1/hazelcast.yaml'
                sh 'kubectl apply -f Chapter08/sample1/calculator.yaml'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'Chapter08/sample1/build/reports/jacoco/test/html/**', fingerprint: true
            echo 'Pipeline complete.'
        }
    }
}
